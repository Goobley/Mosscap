#include "Eos.hpp"
#include "Simulation.hpp"
#include "yaml-cpp/yaml.h"
#include "MosscapConfig.hpp"
#include "YAKL_netcdf.h"
#include "TabulatedLteH.hpp"

bool Eos::init(Simulation& sim, const YAML::Node& config) {
    std::string eos_str = get_or<std::string>(config, "eos.type", "ideal");
    EosType type = find_associated_enum<EosType>(EosTypeName, NumEosType, eos_str);

    switch (type) {
        case EosType::Ideal: {
            fp_t gamma = get_or<fp_t>(config, "eos.gamma", FP(1.4));
            return init_ideal(gamma, sim);
        } break;
        case EosType::AnalyticLteH: {
            fp_t gamma = get_or<fp_t>(config, "eos.gamma", FP(5.0) / FP(3.0));
            return init_analytic_lte_h(gamma, sim);
        } break;
        case EosType::TabulatedLteH: {
            fp_t gamma = get_or<fp_t>(config, "eos.gamma", FP(5.0) / FP(3.0));
            std::string eos_table = get_or<std::string>(config, "eos.table_path", "mosscap_lte_h_tables.nc");
            return init_tabulated_lte_h(gamma, sim, eos_table);
        } break;
    }

    return true;
}


struct AnalyticLteH {
    /// Coarse tables for starting approximation
    struct LogSpace {
        fp_t start;
        fp_t step;
        int num;
    };

    LogSpace eint_rho_grid;
    LogSpace rho_grid;

    FpConst2d y_table;
    FpConst2d log_T_table;

    static constexpr int dim_length = 16;
    static constexpr int flat_table_length = 256;

    bool init() {
        rho_grid = LogSpace {
            .start = FP(-13.776300845324421),
            .step = FP(0.8),
            .num = 16
        };
        eint_rho_grid = LogSpace {
            .start = FP(7.47630084532442),
            .step = FP(0.15333333333333243),
            .num = 16
        };

        y_table = FpConst1dHost("eos_y_table", &y_table_data[0], flat_table_length).reshape(dim_length, dim_length).createDeviceCopy();
        log_T_table = FpConst1dHost("eos_log_T_table", &log_T_table_data[0], flat_table_length).reshape(dim_length, dim_length).createDeviceCopy();

        return true;
    }

    template <int NumDim>
    void update_eos(const Simulation& sim) const {
        const auto& state = sim.state;
        const auto& Q = state.Q;
        const auto& eos = sim.eos;
        const auto& sz = sim.state.sz;
        dex_parallel_for(
            "Analytic LTE H EOS Update y",
            FlatLoop<3>(sz.zc, sz.yc, sz.xc),
            KOKKOS_CLASS_LAMBDA (int k, int j, int i) {
                using Cons = Cons<NumDim>;
                fp_t mom2_sum = square(Q(I(Cons::MomX), k, j, i));
                if constexpr (NumDim > 1) {
                    mom2_sum += square(Q(I(Cons::MomY), k, j, i));
                }
                if constexpr (NumDim > 2) {
                    mom2_sum += square(Q(I(Cons::MomZ), k, j, i));
                }
                const fp_t rho = Q(I(Cons::Rho), k, j, i);
                const fp_t e_kin = FP(0.5) * mom2_sum / rho;
                const fp_t eint = Q(I(Cons::Ene), k, j, i) - e_kin;
                const fp_t eint_rho = eint / rho;

                const fp_t log_rho = std::log10(rho);
                const fp_t log_eint_rho = std::log10(eint_rho);

                fp_t y = trace_ionisation;
                if (log_eint_rho <= eint_rho_grid.start) {
                    y = trace_ionisation;
                } else if (log_eint_rho >= (eint_rho_grid.start + (eint_rho_grid.num-1) * eint_rho_grid.step)) {
                    y = full_ionisation;
                } else {
                    const fp_t frac_rho_idx = (log_rho - rho_grid.start) / rho_grid.step;
                    const fp_t frac_eint_idx = (log_eint_rho - eint_rho_grid.start) / eint_rho_grid.step;
                    int rho_idx = std::max(int(std::round(frac_rho_idx)), rho_grid.num - 1);
                    int eint_rho_idx = std::max(int(std::round(frac_eint_idx)), eint_rho_grid.num - 1);

                    fp_t y = y_table(rho_idx, eint_rho_idx);
                    fp_t T = std::pow(10, log_T_table(rho_idx, eint_rho_idx));
                    const fp_t nhtot = rho / h_mass;

                    const auto residual = [](fp_t y, fp_t T, fp_t nh_tot, fp_t eint, fp_t* residual) {
                        residual[0] = FP(2.4146830395719654e+21)*std::pow(T, FP(1.5))*y*std::exp(FP(-157763.42386247337)/T)/nh_tot - FP(2.4146830395719654e+21)*std::pow(T, FP(1.5))*exp(FP(-157763.42386247337)/T)/nh_tot + std::pow(y, 2);
                        residual[1] = FP(2.0709735000000001e-23)*T*nh_tot*(y + 1.0) - eint + FP(2.178159133923e-18)*nh_tot*y;
                    };

                    const auto jacobian = [](fp_t y, fp_t T, fp_t nh_tot, fp_t eint, fp_t* jacobian) {
                        // J[0, 0] dr[0] / dy
                        jacobian[0] = FP(2.4146830395719654e+21)*std::pow(T, FP(1.5))*std::exp(FP(-157763.42386247337)/T)/nh_tot + 2*y;
                        // J[0, 1] dr[0] / dT
                        jacobian[1] = FP(3.8094866386551756e+26)*std::pow(T, FP(-0.5))*y*std::exp(FP(-157763.42386247337)/T)/nh_tot - FP(3.8094866386551756e+26)*std::pow(T, FP(-0.5))*std::exp(FP(-157763.42386247337)/T)/nh_tot + FP(3.6220245593579481e+21)*std::sqrt(T)*y*std::exp(FP(-157763.42386247337)/T)/nh_tot - FP(3.6220245593579481e+21)*std::sqrt(T)*std::exp(FP(-157763.42386247337)/T)/nh_tot;
                        // J[1, 0] dr[1] / dy
                        jacobian[2] = FP(2.0709735000000001e-23)*T*nh_tot + FP(2.178159133923e-18)*nh_tot;
                        // J[1, 1] dr[1] / dT
                        jacobian[3] = FP(2.0709735000000001e-23)*nh_tot*(y + 1.0);
                    };

                    constexpr int num_iter = 200;
                    for (int i = 0; i < num_iter; ++i) {
                        fp_t E[2];
                        residual(y, T, nhtot, eint, E);
                        fp_t J[4];
                        jacobian(y, T, nhtot, eint, J);
                        fp_t inv_J[4];
                        const fp_t det = FP(1.0) / (J[0] * J[3] - J[1] * J[2]);
                        inv_J[0] = det * J[3];
                        inv_J[1] = -det * J[1];
                        inv_J[2] = -det * J[2];
                        inv_J[3] = det * J[0];

                        fp_t dx[2];
                        dx[0] = inv_J[0] * -E[0] + inv_J[1] * -E[1];
                        dx[1] = inv_J[2] * -E[0] + inv_J[3] * -E[1];

                        while (y + dx[0] < FP(0.0) || y + dx[0] > FP(1.0)) {

                            // TODO(cmo): Finish the iteration
                        }
                    }

                }

            }
        );
        Kokkos::fence();
    }

    static constexpr fp_t trace_ionisation = FP(1e-20);
    static constexpr fp_t full_ionisation = FP(1.0);
    static constexpr fp_t h_mass = FP(1.6737830080950003e-27);

    // Hydrogen ionisation energy J
    static constexpr fp_t chi_H = FP(2.178710282685096e-18); // [J]
    // Both tables are of shape 16x16 [rho, eint_rho]
    static constexpr fp_t y_table_data[flat_table_length] = {
        FP(9.9999999999999995e-21), FP(5.3048160017966266e-04),
        FP(9.6456875945895495e-03), FP(2.6836604538615048e-02),
        FP(5.2527739546128986e-02), FP(8.9771583958667939e-02),
        FP(1.4325256694829977e-01), FP(2.1972349532301691e-01),
        FP(3.2880321793873746e-01), FP(4.8411026713120220e-01),
        FP(7.0465239837637395e-01), FP(9.9927672520279465e-01),
        FP(9.9999997860714318e-01), FP(9.9999999999973377e-01),
        FP(9.9999998996600392e-01), FP(9.9999999999999978e-01),
        FP(9.9999999999999995e-21), FP(2.5973588801177688e-04),
        FP(8.3047762267495877e-03), FP(2.5160303592104010e-02),
        FP(5.0627690822020302e-02), FP(8.7658189052024799e-02),
        FP(1.4089804702233905e-01), FP(2.1706812203320736e-01),
        FP(3.2574663328151537e-01), FP(4.8048867785729416e-01),
        FP(7.0017881998929288e-01), FP(9.9720105627394950e-01),
        FP(9.9999999999985534e-01), FP(9.9999999999972000e-01),
        FP(9.9999998996600170e-01), FP(9.9999999999999933e-01),
        FP(9.9999999999999995e-21), FP(1.1531024104530727e-04),
        FP(6.9265289655533737e-03), FP(2.3360478141426864e-02),
        FP(4.8563367718085462e-02), FP(8.5348018913487714e-02),
        FP(1.3831347231203561e-01), FP(2.1414337777801284e-01),
        FP(3.2236964280076602e-01), FP(4.7647537292032427e-01),
        FP(6.9520555618568480e-01), FP(9.9304548239711288e-01),
        FP(9.9999999999583944e-01), FP(9.9999999999963374e-01),
        FP(9.9999998996598860e-01), FP(9.9999999999999534e-01),
        FP(9.9999999999999995e-21), FP(4.8272524948183150e-05),
        FP(5.5358840760523784e-03), FP(2.1429330527413970e-02),
        FP(4.6315695264019838e-02), FP(8.2814508239875045e-02),
        FP(1.3546533940197036e-01), FP(2.1090799681940053e-01),
        FP(3.1862117215903302e-01), FP(4.7200570622631810e-01),
        FP(6.8964750620280002e-01), FP(9.8713812178971472e-01),
        FP(9.9999999996988909e-01), FP(9.9999999999908862e-01),
        FP(9.9999998996590445e-01), FP(9.9999999999997080e-01),
        FP(9.9999999999999995e-21), FP(1.9633604471113822e-05),
        FP(4.1747398341461109e-03), FP(1.9361280632208346e-02),
        FP(4.3863564862923816e-02), FP(8.0026708566377974e-02),
        FP(1.3231380018291111e-01), FP(2.0731229475432544e-01),
        FP(3.1443918071009908e-01), FP(4.6700058340921202e-01),
        FP(6.8339993360607154e-01), FP(9.7977413917214962e-01),
        FP(9.9999999981001331e-01), FP(9.9999999999564937e-01),
        FP(9.9999999999948030e-01), FP(9.9999999999981548e-01),
        FP(3.7451918733183931e-10), FP(7.8851603162563401e-06),
        FP(2.9081387280972116e-03), FP(1.7155240804224918e-02),
        FP(4.1184088286897270e-02), FP(7.6948598752398734e-02),
        FP(1.2881126418519620e-01), FP(2.0329606549247553e-01),
        FP(3.0974771843168264e-01), FP(4.6136238850076633e-01),
        FP(6.7633273980463071e-01), FP(9.7100221475839943e-01),
        FP(9.9999999880126456e-01), FP(9.9999999997394895e-01),
        FP(9.9999999999601707e-01), FP(9.9999999999883649e-01),
        FP(1.4909882498848189e-10), FP(3.1502533877924655e-06),
        FP(1.8237631066318914e-03), FP(1.4818474844425179e-02),
        FP(3.8253330909405761e-02), FP(7.3538411999633929e-02),
        FP(1.2490070424209783e-01), FP(1.9878588865810920e-01),
        FP(3.0445305632899122e-01), FP(4.5496953993320094e-01),
        FP(6.6828273437296759e-01), FP(9.6071066188031573e-01),
        FP(9.9999999243649051e-01), FP(9.9999999983702870e-01),
        FP(9.9999999997487010e-01), FP(9.9999999999265810e-01),
        FP(5.9357318787897009e-11), FP(1.2559127559693203e-06),
        FP(1.0078870280664815e-03), FP(1.2373011892319949e-02),
        FP(3.5047937996850013e-02), FP(6.9748130192533564e-02),
        FP(1.2051365264987533e-01), FP(1.9369169099201605e-01),
        FP(2.9843857526568607e-01), FP(4.4766915749472114e-01),
        FP(6.5904310515693476e-01), FP(9.4867361555286489e-01),
        FP(9.9999995227751226e-01), FP(9.9999999897312120e-01),
        FP(9.9999999984144228e-01), FP(9.9999999995367683e-01),
        FP(2.3630575486313388e-11), FP(5.0026989300353769e-07),
        FP(4.9102635422710629e-04), FP(9.8658520384393694e-03),
        FP(3.1548392385348900e-02), FP(6.5523462761177986e-02),
        FP(1.1556794476740463e-01), FP(1.8790239512251619e-01),
        FP(2.9155800351838601e-01), FP(4.3926712331578560e-01),
        FP(6.4834895879475096e-01), FP(9.3455755104993155e-01),
        FP(9.9999969889190454e-01), FP(9.9999999352223379e-01),
        FP(9.9999999899956860e-01), FP(9.9999999970772013e-01),
        FP(9.4075065174142471e-12), FP(1.9920578013216643e-07),
        FP(2.1716815105520093e-04), FP(7.3834915382144095e-03),
        FP(2.7745197357824984e-02), FP(6.0804951573415041e-02),
        FP(1.0996543530925786e-01), FP(1.8128052934721603e-01),
        FP(2.8362650131861289e-01), FP(4.2951456901785900e-01),
        FP(6.3585735440423763e-01), FP(9.1790495463272592e-01),
        FP(9.9999810019043212e-01), FP(9.9999995912946849e-01),
        FP(9.9999999368770331e-01), FP(9.9999999815583818e-01),
        FP(3.7451939326669250e-12), FP(7.9312344900786975e-08),
        FP(9.0722624687717044e-05), FP(5.0664202547360147e-03),
        FP(2.3650152611783385e-02), FP(5.5531466890496164e-02),
        FP(1.0359029212872033e-01), FP(1.7365584865434752e-01),
        FP(2.7440906170129020e-01), FP(4.1808955345148846e-01),
        FP(6.2111970691932905e-01), FP(8.9810056758238643e-01),
        FP(9.9998801499738732e-01), FP(9.9999974212617171e-01),
        FP(9.9999996017210813e-01), FP(9.9999998836412674e-01),
        FP(1.4909885646926685e-12), FP(3.1575937971181402e-08),
        FP(3.6863163983335783e-05), FP(3.1036039049726467e-03),
        FP(1.9315945237487902e-02), FP(4.9648528044318657e-02),
        FP(9.6309296539188835e-02), FP(1.6481853121841830e-01),
        FP(2.6360590195909356e-01), FP(4.0457255895682748e-01),
        FP(6.0354394148881196e-01), FP(8.7431972163401062e-01),
        FP(9.9992445843175870e-01), FP(9.9999837294311578e-01),
        FP(9.9999974870323782e-01), FP(9.9999992658261616e-01),
        FP(5.9357323960734754e-13), FP(1.2570785597539811e-08),
        FP(1.4798695969267205e-05), FP(1.6668753279132171e-03),
        FP(1.4867188805206226e-02), FP(4.3125947668849182e-02),
        FP(8.7977315812222817e-02), FP(1.5451382605758829e-01),
        FP(2.5083540648031599e-01), FP(3.8841489109347438e-01),
        FP(5.8234388886080068e-01), FP(8.4545625870085594e-01),
        FP(9.9952646046860805e-01), FP(9.9998973458651830e-01),
        FP(9.9999841443460036e-01), FP(9.9999953676832554e-01),
        FP(2.3630576306155800e-13), FP(5.0045481412551598e-09),
        FP(5.9113268118828485e-06), FP(7.9147247767645567e-04),
        FP(1.0539246542497247e-02), FP(3.5992417803768766e-02),
        FP(7.8454623870328782e-02), FP(1.4244315294080026e-01),
        FP(2.3561786762550743e-01), FP(3.6890141276179667e-01),
        FP(5.5647579998882835e-01), FP(8.1002981469226543e-01),
        FP(9.9712688878074662e-01), FP(9.9993525428816299e-01),
        FP(9.9998999615480788e-01), FP(9.9999707723318632e-01),
        FP(9.4075018737764594e-14), FP(1.9923510885621344e-09),
        FP(2.3565106422188234e-06), FP(3.4417906932430017e-04),
        FP(6.6932755012894815e-03), FP(2.8397131710729537e-02),
        FP(6.7649270713612028e-02), FP(1.2828368610620272e-01),
        FP(2.1737040749264791e-01), FP(3.4511666028131399e-01),
        FP(5.2457113225681273e-01), FP(7.6608456897941501e-01),
        FP(9.8506165983883753e-01), FP(9.9959246001505198e-01),
        FP(9.9993689576819900e-01), FP(9.9998155968070734e-01),
        FP(3.7451939532603371e-14), FP(7.9316992061125806e-10),
        FP(9.3864741225262920e-07), FP(1.4253097695490674e-04),
        FP(3.7239888098936384e-03), FP(2.0700631435813799e-02),
        FP(5.5607399968165827e-02), FP(1.1175296379852087e-01),
        FP(1.9544077181098565e-01), FP(3.1594438959834631e-01),
        FP(4.8490243487303469e-01), FP(7.1112977712850178e-01),
        FP(9.4704601562951218e-01), FP(9.9746650932173353e-01),
        FP(9.9960246510787909e-01), FP(9.9988369292001567e-01)
    };

    static constexpr fp_t log_T_table_data[256] = {
        FP(3.3838261814549768e+00), FP(3.5298367414725611e+00),
        FP(3.5856522175190633e+00), FP(3.6072747143300568e+00),
        FP(3.6222202961513741e+00), FP(3.6347262648535965e+00),
        FP(3.6462206260974850e+00), FP(3.6574599825976564e+00),
        FP(3.6690805909349913e+00), FP(3.6820197194501767e+00),
        FP(3.6988931084017267e+00), FP(3.7968500549252004e+00),
        FP(4.4931188405116318e+00), FP(4.8232898169490088e+00),
        FP(5.0682836333575123e+00), FP(5.2761044386662261e+00),
        FP(3.3838257461632808e+00), FP(3.5335882009675705e+00),
        FP(3.6017004362844061e+00), FP(3.6260237688315549e+00),
        FP(3.6422514912269337e+00), FP(3.6556391869280644e+00),
        FP(3.6678568566043497e+00), FP(3.6797558600615536e+00),
        FP(3.6920277127996504e+00), FP(3.7056633232288982e+00),
        FP(3.7233744645998881e+00), FP(3.8048066216264238e+00),
        FP(4.4931189161180827e+00), FP(4.8232898169490159e+00),
        FP(5.0682836333575132e+00), FP(5.2761044386662261e+00),
        FP(3.3838255728785476e+00), FP(3.5355770145560363e+00),
        FP(3.6176419866555909e+00), FP(3.6453562489613396e+00),
        FP(3.6630925305108586e+00), FP(3.6774895668733394e+00),
        FP(3.6905237848137800e+00), FP(3.7031616129661571e+00),
        FP(3.7161592372099670e+00), FP(3.7305677589976658e+00),
        FP(3.7492015078721428e+00), FP(3.8203585044842230e+00),
        FP(4.4931189161219010e+00), FP(4.8232898169490648e+00),
        FP(5.0682836333575185e+00), FP(5.2761044386662279e+00),
        FP(3.3838255038938785e+00), FP(3.5364972661020997e+00),
        FP(3.6331968737161962e+00), FP(3.6652555619124794e+00),
        FP(3.6847889761196524e+00), FP(3.7003516378306016e+00),
        FP(3.7143142578555173e+00), FP(3.7277847747011368e+00),
        FP(3.7415958482622815e+00), FP(3.7568666109121645e+00),
        FP(3.7765210385821746e+00), FP(3.8416543560351402e+00),
        FP(4.4931189161465568e+00), FP(4.8232898169493694e+00),
        FP(5.0682836333575532e+00), FP(5.2761044386662359e+00),
        FP(3.3838254764307987e+00), FP(3.5368898470222656e+00),
        FP(3.6479402345260783e+00), FP(3.6856786267073196e+00),
        FP(3.7073833771931657e+00), FP(3.7243055267668126e+00),
        FP(3.7393321483844701e+00), FP(3.7537476579279812e+00),
        FP(3.7684761985470754e+00), FP(3.7847144138532234e+00),
        FP(3.8055036236355422e+00), FP(3.8669815055187300e+00),
        FP(4.4931189162985836e+00), FP(4.8232898169512968e+00),
        FP(5.0682837012537902e+00), FP(5.2761044386662883e+00),
        FP(3.3838254510345958e+00), FP(3.5370507980253993e+00),
        FP(3.6612583182127381e+00), FP(3.7065403510703527e+00),
        FP(3.7309109611936444e+00), FP(3.7494365217730579e+00),
        FP(3.7656934534438857e+00), FP(3.7811896939001848e+00),
        FP(3.7969602452919466e+00), FP(3.8142908741569101e+00),
        FP(3.8363485850274150e+00), FP(3.8955663947703822e+00),
        FP(4.4931189172578039e+00), FP(4.8232898169634533e+00),
        FP(5.0682837012552096e+00), FP(5.2761044386666196e+00),
        FP(3.3838254553871758e+00), FP(3.5371156493777840e+00),
        FP(3.6723702545939365e+00), FP(3.7276891363605196e+00),
        FP(3.7553924985454286e+00), FP(3.7758332750484542e+00),
        FP(3.7935271384650453e+00), FP(3.8102700243800598e+00),
        FP(3.8272332239855338e+00), FP(3.8458060499180702e+00),
        FP(3.8692902035894767e+00), FP(3.9271613243948589e+00),
        FP(4.4931189233100746e+00), FP(4.8232898170401581e+00),
        FP(5.0682837012639279e+00), FP(5.2761044386687086e+00),
        FP(3.3838254571199702e+00), FP(3.5371415925540908e+00),
        FP(3.6805626536066121e+00), FP(3.7488685416329526e+00),
        FP(3.7808225258138792e+00), FP(3.8035841352571187e+00),
        FP(3.8229753460688722e+00), FP(3.8411702146740248e+00),
        FP(3.8595103050662893e+00), FP(3.8795066751785696e+00),
        FP(3.9046054223150177e+00), FP(3.9617928713353794e+00),
        FP(4.4931189614972951e+00), FP(4.8232898175241319e+00),
        FP(5.0682837013189417e+00), FP(5.2761044386818874e+00),
        FP(3.3838254578098081e+00), FP(3.5371519407504879e+00),
        FP(3.6856805008664759e+00), FP(3.7696595584027905e+00),
        FP(3.8071499138771645e+00), FP(3.8327702132106602e+00),
        FP(3.8541922548969958e+00), FP(3.8740967621096303e+00),
        FP(3.8940418796424150e+00), FP(3.9156837810328029e+00),
        FP(3.9426233459021627e+00), FP(3.9996569301846319e+00),
        FP(4.4931192024418989e+00), FP(4.8232898205777994e+00),
        FP(5.0682837016660498e+00), FP(5.2761044387650422e+00),
        FP(3.3838254580844378e+00), FP(3.5371560636266617e+00),
        FP(3.6883700587553769e+00), FP(3.7894038120130187e+00),
        FP(3.8342458476341266e+00), FP(3.8634527522226847e+00),
        FP(3.8873402565313371e+00), FP(3.9092826852278875e+00),
        FP(3.9311191805995405e+00), FP(3.9546816315135502e+00),
        FP(3.9837367619639505e+00), FP(4.0410795086264635e+00),
        FP(4.4931207226470731e+00), FP(4.8232898398451329e+00),
        FP(5.0682837038561583e+00), FP(5.2761044392897114e+00),
        FP(3.3838254581937695e+00), FP(3.5371577054786583e+00),
        FP(3.6896067743019811e+00), FP(3.8071396360125207e+00),
        FP(3.8618515459039573e+00), FP(3.8956505750203450e+00),
        FP(3.9225809756114813e+00), FP(3.9469867045342388e+00),
        FP(3.9710794087269012e+00), FP(3.9969076148117377e+00),
        FP(4.0284156234224566e+00), FP(4.0865071845119232e+00),
        FP(4.4931303125901740e+00), FP(4.8232899614135709e+00),
        FP(5.0682837176748032e+00), FP(5.2761044426001504e+00),
        FP(3.3838254582372955e+00), FP(3.5371583591918569e+00),
        FP(3.6901325802651241e+00), FP(3.8216779325105592e+00),
        FP(3.8894955751068547e+00), FP(3.9293003241226647e+00),
        FP(3.9600565425675573e+00), FP(3.9874869903038523e+00),
        FP(4.0143083704823894e+00), FP(4.0428418054267405e+00),
        FP(4.0772216330945721e+00), FP(4.1365119831142803e+00),
        FP(4.4931907454594739e+00), FP(4.8232907284498756e+00),
        FP(5.0682838048644623e+00), FP(5.2761044634876040e+00),
        FP(3.3838254582546234e+00), FP(3.5371586194524736e+00),
        FP(3.6903478185085268e+00), FP(3.8320540003571919e+00),
        FP(3.9163746956630447e+00), FP(3.9641874196607003e+00),
        FP(3.9998526586425185e+00), FP(4.0310634218855537e+00),
        FP(4.0612361577684641e+00), FP(4.0930427719143276e+00),
        FP(4.1308210896967976e+00), FP(4.1918020922802306e+00),
        FP(4.4935690786855877e+00), FP(4.8232955677761327e+00),
        FP(5.0682843549900323e+00), FP(5.2761045952783050e+00),
        FP(3.3838254582615219e+00), FP(3.5371587230661050e+00),
        FP(3.6904344870903962e+00), FP(3.8382709640182333e+00),
        FP(3.9412265106065525e+00), FP(3.9998298500068343e+00),
        FP(4.0419281948649193e+00), FP(4.0779563951919711e+00),
        FP(4.1123162018856041e+00), FP(4.1481414060339405e+00),
        FP(4.1899885086075255e+00), FP(4.2532288232309448e+00),
        FP(4.4958463093875007e+00), FP(4.8233260881098401e+00),
        FP(5.0682878258893549e+00), FP(5.2761054268126255e+00),
        FP(3.3838254582642682e+00), FP(3.5371587643157527e+00),
        FP(3.6904691488300845e+00), FP(3.8414176807647755e+00),
        FP(3.9623432519518333e+00), FP(4.0352972328097545e+00),
        FP(4.0859854420231807e+00), FP(4.1282791234361147e+00),
        FP(4.1679673707946545e+00), FP(4.2088040941655294e+00),
        FP(4.2555830644327406e+00), FP(4.3217714322575311e+00),
        FP(4.5071999390207216e+00), FP(4.8235181133682463e+00),
        FP(5.0683097194813431e+00), FP(5.2761106730898364e+00),
        FP(3.3838254582653615e+00), FP(3.5371587807375855e+00),
        FP(3.6904829732038111e+00), FP(3.8428297705996037e+00),
        FP(3.9780760570980864e+00), FP(4.0689848874458496e+00),
        FP(4.1312442866674646e+00), FP(4.1818415857692202e+00),
        FP(4.2284380437502387e+00), FP(4.2756247768534887e+00),
        FP(4.3284574369036539e+00), FP(4.3984595817812711e+00),
        FP(4.5419869338863545e+00), FP(4.8247085959117877e+00),
        FP(5.0684476085030257e+00), FP(5.2761437609499051e+00)
    };
};

bool Eos::init_analytic_lte_h(fp_t gamma, Simulation& sim) {
    is_constant = false;
    Gamma = gamma;
    const auto& sz = sim.state.sz;
    gamma_e_space = Fp3d("gamma_e_space", sz.zc, sz.yc, sz.xc);
    gamma_e_space_R = Fp3d("gamma_e_space_R", sz.zc, sz.yc, sz.xc);
    gamma_e_space_L = Fp3d("gamma_e_space_L", sz.zc, sz.yc, sz.xc);

    AnalyticLteH lte_eos;
    lte_eos.init();

    // sim.update_eos = ...;
    throw std::runtime_error("NYI");

    return true;
}

bool Eos::init_tabulated_lte_h(fp_t gamma, Simulation& sim, const std::string& table_path) {
    is_constant = false;
    Gamma = gamma;

    const auto& sz = sim.state.sz;
    gamma_e_space = Fp3d("gamma_e_space", sz.zc, sz.yc, sz.xc);
    y_space = Fp3d("y_space", sz.zc, sz.yc, sz.xc);
    T_space = Fp3d("T_space", sz.zc, sz.yc, sz.xc);
    gamma_e_space_R = Fp3d("gamma_e_space_R", sz.zc, sz.yc, sz.xc);
    gamma_e_space_L = Fp3d("gamma_e_space_L", sz.zc, sz.yc, sz.xc);

    TabulatedLteH lte_h;
    lte_h.init(table_path);
    y_space = FP(-1.0);

    sim.update_eos = [lte_h](const Simulation& sim) {
        if (sim.num_dim == 1) {
            lte_h.update_eos<1>(sim);
        } else if (sim.num_dim == 2) {
            lte_h.update_eos<2>(sim);
        } else {
            lte_h.update_eos<3>(sim);
        }
    };
    return true;
}